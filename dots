#!/usr/bin/env bash

CWD=$( pwd )
DOTFILES_DIR=${DOTFILES_DIR:-~/dotfiles}
SCRIPT_NAME=${0##*/}

usage() {
  cat << EOF
usage: ${SCRIPT_NAME} <command>

Manage dotfiles accross machines.
Requires a dotsrc.json in ${DOTFILES_DIR}

Commands:
  init       Initialize dotfiles directory
  sync       Update dotfiles
  help       Display this message

EOF
}

error() {
  [[ -z "$1" ]] || printf '%s: %s\n' "${SCRIPT_NAME}" "$1"
  printf "Try '%s help' for more information.\\n" "${SCRIPT_NAME}"
  exit 1
} >&2

push_changes() {
  git push
}

pull_changes() {
  file="$DOTFILES_DIR/dotsrc.json"
  dotsrc=$(<$file)

  if [ -e "$dotsrc" ]; then
    error "No dotsrc.json found";
  fi

  git pull

  new_dotsrc=$(<$file)

  if [ -e "$new_dotsrc" ]; then
    error "No dotsrc.json found";
  fi

  if [ "$( jq 'has("symlinks")' $new_dotsrc  )" = 'true'  ]; then
    echo "has symlinks"
  fi
}

dots_sync() {
  cd $DOTFILES_DIR
  remote_ref=$(git rev-parse origin)
  local_ref=$(git rev-parse @)
  merge_base=$(git merge-base @ origin)

  if [ "$local_ref" == "$remote_ref" ]; then
    return 0;
  elif [ "$local_ref" == "$merge_base"  ]; then
    pull_changes
  elif [ "$remote_ref" == "$merge_base"  ]; then
    push_changes
  else
    error 'Dotfiles diverged: manually fix your repo'
  fi
}

parse_arguments() {
  COMMAND=$1

  case "${COMMAND}" in
    'sync')
      dots_sync
      ;;
    'help')
      usage
      exit
      ;;
    '')
      error 'Missing command'
      ;;
    *)
      error 'Invalid command'
  esac
}

parse_arguments "$@"
